// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/15/2018 09:25:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    trivium1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module trivium1_vlg_sample_tst(
	clkn,
	encip,
	IV_1,
	IV_2,
	IV_3,
	IV_4,
	IV_5,
	IV_6,
	IV_7,
	IV_8,
	IV_9,
	IV_10,
	IV_11,
	IV_12,
	IV_13,
	IV_14,
	IV_15,
	IV_16,
	IV_17,
	IV_18,
	IV_19,
	IV_20,
	IV_21,
	IV_22,
	IV_23,
	IV_24,
	IV_25,
	IV_26,
	IV_27,
	IV_28,
	IV_29,
	IV_30,
	IV_31,
	IV_32,
	IV_33,
	IV_34,
	IV_35,
	IV_36,
	IV_37,
	IV_38,
	IV_39,
	IV_40,
	IV_41,
	IV_42,
	IV_43,
	IV_44,
	IV_45,
	IV_46,
	IV_47,
	IV_48,
	IV_49,
	IV_50,
	IV_51,
	IV_52,
	IV_53,
	IV_54,
	IV_55,
	IV_56,
	IV_57,
	IV_58,
	IV_59,
	IV_60,
	IV_61,
	IV_62,
	IV_63,
	IV_64,
	IV_65,
	IV_66,
	IV_67,
	IV_68,
	IV_69,
	IV_70,
	IV_71,
	IV_72,
	IV_73,
	IV_74,
	IV_75,
	IV_76,
	IV_77,
	IV_78,
	IV_79,
	IV_80,
	Key_1,
	Key_2,
	Key_3,
	Key_4,
	Key_5,
	Key_6,
	Key_7,
	Key_8,
	Key_9,
	Key_10,
	Key_11,
	Key_12,
	Key_13,
	Key_14,
	Key_15,
	Key_16,
	Key_17,
	Key_18,
	Key_19,
	Key_20,
	Key_21,
	Key_22,
	Key_23,
	Key_24,
	Key_25,
	Key_26,
	Key_27,
	Key_28,
	Key_29,
	Key_30,
	Key_31,
	Key_32,
	Key_33,
	Key_34,
	Key_35,
	Key_36,
	Key_37,
	Key_38,
	Key_39,
	Key_40,
	Key_41,
	Key_42,
	Key_43,
	Key_44,
	Key_45,
	Key_46,
	Key_47,
	Key_48,
	Key_49,
	Key_50,
	Key_51,
	Key_52,
	Key_53,
	Key_54,
	Key_55,
	Key_56,
	Key_57,
	Key_58,
	Key_59,
	Key_60,
	Key_61,
	Key_62,
	Key_63,
	Key_64,
	Key_65,
	Key_66,
	Key_67,
	Key_68,
	Key_69,
	Key_70,
	Key_71,
	Key_72,
	Key_73,
	Key_74,
	Key_75,
	Key_76,
	Key_77,
	Key_78,
	Key_79,
	Key_80,
	last3_ip,
	message,
	sampler_tx
);
input  clkn;
input  encip;
input  IV_1;
input  IV_2;
input  IV_3;
input  IV_4;
input  IV_5;
input  IV_6;
input  IV_7;
input  IV_8;
input  IV_9;
input  IV_10;
input  IV_11;
input  IV_12;
input  IV_13;
input  IV_14;
input  IV_15;
input  IV_16;
input  IV_17;
input  IV_18;
input  IV_19;
input  IV_20;
input  IV_21;
input  IV_22;
input  IV_23;
input  IV_24;
input  IV_25;
input  IV_26;
input  IV_27;
input  IV_28;
input  IV_29;
input  IV_30;
input  IV_31;
input  IV_32;
input  IV_33;
input  IV_34;
input  IV_35;
input  IV_36;
input  IV_37;
input  IV_38;
input  IV_39;
input  IV_40;
input  IV_41;
input  IV_42;
input  IV_43;
input  IV_44;
input  IV_45;
input  IV_46;
input  IV_47;
input  IV_48;
input  IV_49;
input  IV_50;
input  IV_51;
input  IV_52;
input  IV_53;
input  IV_54;
input  IV_55;
input  IV_56;
input  IV_57;
input  IV_58;
input  IV_59;
input  IV_60;
input  IV_61;
input  IV_62;
input  IV_63;
input  IV_64;
input  IV_65;
input  IV_66;
input  IV_67;
input  IV_68;
input  IV_69;
input  IV_70;
input  IV_71;
input  IV_72;
input  IV_73;
input  IV_74;
input  IV_75;
input  IV_76;
input  IV_77;
input  IV_78;
input  IV_79;
input  IV_80;
input  Key_1;
input  Key_2;
input  Key_3;
input  Key_4;
input  Key_5;
input  Key_6;
input  Key_7;
input  Key_8;
input  Key_9;
input  Key_10;
input  Key_11;
input  Key_12;
input  Key_13;
input  Key_14;
input  Key_15;
input  Key_16;
input  Key_17;
input  Key_18;
input  Key_19;
input  Key_20;
input  Key_21;
input  Key_22;
input  Key_23;
input  Key_24;
input  Key_25;
input  Key_26;
input  Key_27;
input  Key_28;
input  Key_29;
input  Key_30;
input  Key_31;
input  Key_32;
input  Key_33;
input  Key_34;
input  Key_35;
input  Key_36;
input  Key_37;
input  Key_38;
input  Key_39;
input  Key_40;
input  Key_41;
input  Key_42;
input  Key_43;
input  Key_44;
input  Key_45;
input  Key_46;
input  Key_47;
input  Key_48;
input  Key_49;
input  Key_50;
input  Key_51;
input  Key_52;
input  Key_53;
input  Key_54;
input  Key_55;
input  Key_56;
input  Key_57;
input  Key_58;
input  Key_59;
input  Key_60;
input  Key_61;
input  Key_62;
input  Key_63;
input  Key_64;
input  Key_65;
input  Key_66;
input  Key_67;
input  Key_68;
input  Key_69;
input  Key_70;
input  Key_71;
input  Key_72;
input  Key_73;
input  Key_74;
input  Key_75;
input  Key_76;
input  Key_77;
input  Key_78;
input  Key_79;
input  Key_80;
input  last3_ip;
input  message;
output sampler_tx;

reg sample;
time current_time;
always @(clkn or encip or IV_1 or IV_2 or IV_3 or IV_4 or IV_5 or IV_6 or IV_7 or IV_8 or IV_9 or IV_10 or IV_11 or IV_12 or IV_13 or IV_14 or IV_15 or IV_16 or IV_17 or IV_18 or IV_19 or IV_20 or IV_21 or IV_22 or IV_23 or IV_24 or IV_25 or IV_26 or IV_27 or IV_28 or IV_29 or IV_30 or IV_31 or IV_32 or IV_33 or IV_34 or IV_35 or IV_36 or IV_37 or IV_38 or IV_39 or IV_40 or IV_41 or IV_42 or IV_43 or IV_44 or IV_45 or IV_46 or IV_47 or IV_48 or IV_49 or IV_50 or IV_51 or IV_52 or IV_53 or IV_54 or IV_55 or IV_56 or IV_57 or IV_58 or IV_59 or IV_60 or IV_61 or IV_62 or IV_63 or IV_64 or IV_65 or IV_66 or IV_67 or IV_68 or IV_69 or IV_70 or IV_71 or IV_72 or IV_73 or IV_74 or IV_75 or IV_76 or IV_77 or IV_78 or IV_79 or IV_80 or Key_1 or Key_2 or Key_3 or Key_4 or Key_5 or Key_6 or Key_7 or Key_8 or Key_9 or Key_10 or Key_11 or Key_12 or Key_13 or Key_14 or Key_15 or Key_16 or Key_17 or Key_18 or Key_19 or Key_20 or Key_21 or Key_22 or Key_23 or Key_24 or Key_25 or Key_26 or Key_27 or Key_28 or Key_29 or Key_30 or Key_31 or Key_32 or Key_33 or Key_34 or Key_35 or Key_36 or Key_37 or Key_38 or Key_39 or Key_40 or Key_41 or Key_42 or Key_43 or Key_44 or Key_45 or Key_46 or Key_47 or Key_48 or Key_49 or Key_50 or Key_51 or Key_52 or Key_53 or Key_54 or Key_55 or Key_56 or Key_57 or Key_58 or Key_59 or Key_60 or Key_61 or Key_62 or Key_63 or Key_64 or Key_65 or Key_66 or Key_67 or Key_68 or Key_69 or Key_70 or Key_71 or Key_72 or Key_73 or Key_74 or Key_75 or Key_76 or Key_77 or Key_78 or Key_79 or Key_80 or last3_ip or message)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module trivium1_vlg_check_tst (
	bit1,
	bit2,
	bit3,
	bit4,
	bit5,
	bit6,
	bit7,
	bit8,
	bit9,
	bit10,
	bit11,
	Cipher,
	filter_out,
	KEYSTREAM,
	KEYSTREAM226,
	Message_Decrypted,
	pulse_1152,
	pulse_200000,
	sampler_rx
);
input  bit1;
input  bit2;
input  bit3;
input  bit4;
input  bit5;
input  bit6;
input  bit7;
input  bit8;
input  bit9;
input  bit10;
input  bit11;
input  Cipher;
input  filter_out;
input  KEYSTREAM;
input  KEYSTREAM226;
input  Message_Decrypted;
input  pulse_1152;
input  pulse_200000;
input sampler_rx;

reg  bit1_expected;
reg  bit2_expected;
reg  bit3_expected;
reg  bit4_expected;
reg  bit5_expected;
reg  bit6_expected;
reg  bit7_expected;
reg  bit8_expected;
reg  bit9_expected;
reg  bit10_expected;
reg  bit11_expected;
reg  Cipher_expected;
reg  filter_out_expected;
reg  KEYSTREAM_expected;
reg  KEYSTREAM226_expected;
reg  Message_Decrypted_expected;
reg  pulse_1152_expected;
reg  pulse_200000_expected;

reg  bit1_prev;
reg  bit2_prev;
reg  bit3_prev;
reg  bit4_prev;
reg  bit5_prev;
reg  bit6_prev;
reg  bit7_prev;
reg  bit8_prev;
reg  bit9_prev;
reg  bit10_prev;
reg  bit11_prev;
reg  Cipher_prev;
reg  filter_out_prev;
reg  KEYSTREAM_prev;
reg  KEYSTREAM226_prev;
reg  Message_Decrypted_prev;
reg  pulse_1152_prev;
reg  pulse_200000_prev;

reg  bit1_expected_prev;
reg  bit2_expected_prev;
reg  bit3_expected_prev;
reg  bit4_expected_prev;
reg  bit5_expected_prev;
reg  bit6_expected_prev;
reg  bit7_expected_prev;
reg  bit8_expected_prev;
reg  bit9_expected_prev;
reg  bit10_expected_prev;
reg  bit11_expected_prev;
reg  filter_out_expected_prev;

reg  last_bit1_exp;
reg  last_bit2_exp;
reg  last_bit3_exp;
reg  last_bit4_exp;
reg  last_bit5_exp;
reg  last_bit6_exp;
reg  last_bit7_exp;
reg  last_bit8_exp;
reg  last_bit9_exp;
reg  last_bit10_exp;
reg  last_bit11_exp;
reg  last_filter_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	bit1_prev = bit1;
	bit2_prev = bit2;
	bit3_prev = bit3;
	bit4_prev = bit4;
	bit5_prev = bit5;
	bit6_prev = bit6;
	bit7_prev = bit7;
	bit8_prev = bit8;
	bit9_prev = bit9;
	bit10_prev = bit10;
	bit11_prev = bit11;
	Cipher_prev = Cipher;
	filter_out_prev = filter_out;
	KEYSTREAM_prev = KEYSTREAM;
	KEYSTREAM226_prev = KEYSTREAM226;
	Message_Decrypted_prev = Message_Decrypted;
	pulse_1152_prev = pulse_1152;
	pulse_200000_prev = pulse_200000;
end

// update expected /o prevs

always @(trigger)
begin
	bit1_expected_prev = bit1_expected;
	bit2_expected_prev = bit2_expected;
	bit3_expected_prev = bit3_expected;
	bit4_expected_prev = bit4_expected;
	bit5_expected_prev = bit5_expected;
	bit6_expected_prev = bit6_expected;
	bit7_expected_prev = bit7_expected;
	bit8_expected_prev = bit8_expected;
	bit9_expected_prev = bit9_expected;
	bit10_expected_prev = bit10_expected;
	bit11_expected_prev = bit11_expected;
	filter_out_expected_prev = filter_out_expected;
end



// expected bit1
initial
begin
	bit1_expected = 1'bX;
end 

// expected bit2
initial
begin
	bit2_expected = 1'bX;
end 

// expected bit3
initial
begin
	bit3_expected = 1'bX;
end 

// expected bit4
initial
begin
	bit4_expected = 1'bX;
end 

// expected bit5
initial
begin
	bit5_expected = 1'bX;
end 

// expected bit6
initial
begin
	bit6_expected = 1'bX;
end 

// expected bit7
initial
begin
	bit7_expected = 1'bX;
end 

// expected bit8
initial
begin
	bit8_expected = 1'bX;
end 

// expected bit9
initial
begin
	bit9_expected = 1'bX;
end 

// expected bit10
initial
begin
	bit10_expected = 1'bX;
end 

// expected bit11
initial
begin
	bit11_expected = 1'bX;
end 

// expected filter_out
initial
begin
	filter_out_expected = 1'bX;
end 
// generate trigger
always @(bit1_expected or bit1 or bit2_expected or bit2 or bit3_expected or bit3 or bit4_expected or bit4 or bit5_expected or bit5 or bit6_expected or bit6 or bit7_expected or bit7 or bit8_expected or bit8 or bit9_expected or bit9 or bit10_expected or bit10 or bit11_expected or bit11 or Cipher_expected or Cipher or filter_out_expected or filter_out or KEYSTREAM_expected or KEYSTREAM or KEYSTREAM226_expected or KEYSTREAM226 or Message_Decrypted_expected or Message_Decrypted or pulse_1152_expected or pulse_1152 or pulse_200000_expected or pulse_200000)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bit1 = %b | expected bit2 = %b | expected bit3 = %b | expected bit4 = %b | expected bit5 = %b | expected bit6 = %b | expected bit7 = %b | expected bit8 = %b | expected bit9 = %b | expected bit10 = %b | expected bit11 = %b | expected Cipher = %b | expected filter_out = %b | expected KEYSTREAM = %b | expected KEYSTREAM226 = %b | expected Message_Decrypted = %b | expected pulse_1152 = %b | expected pulse_200000 = %b | ",bit1_expected_prev,bit2_expected_prev,bit3_expected_prev,bit4_expected_prev,bit5_expected_prev,bit6_expected_prev,bit7_expected_prev,bit8_expected_prev,bit9_expected_prev,bit10_expected_prev,bit11_expected_prev,Cipher_expected_prev,filter_out_expected_prev,KEYSTREAM_expected_prev,KEYSTREAM226_expected_prev,Message_Decrypted_expected_prev,pulse_1152_expected_prev,pulse_200000_expected_prev);
	$display("| real bit1 = %b | real bit2 = %b | real bit3 = %b | real bit4 = %b | real bit5 = %b | real bit6 = %b | real bit7 = %b | real bit8 = %b | real bit9 = %b | real bit10 = %b | real bit11 = %b | real Cipher = %b | real filter_out = %b | real KEYSTREAM = %b | real KEYSTREAM226 = %b | real Message_Decrypted = %b | real pulse_1152 = %b | real pulse_200000 = %b | ",bit1_prev,bit2_prev,bit3_prev,bit4_prev,bit5_prev,bit6_prev,bit7_prev,bit8_prev,bit9_prev,bit10_prev,bit11_prev,Cipher_prev,filter_out_prev,KEYSTREAM_prev,KEYSTREAM226_prev,Message_Decrypted_prev,pulse_1152_prev,pulse_200000_prev);
`endif
	if (
		( bit1_expected_prev !== 1'bx ) && ( bit1_prev !== bit1_expected_prev )
		&& ((bit1_expected_prev !== last_bit1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit1_expected_prev);
		$display ("     Real value = %b", bit1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bit1_exp = bit1_expected_prev;
	end
	if (
		( bit2_expected_prev !== 1'bx ) && ( bit2_prev !== bit2_expected_prev )
		&& ((bit2_expected_prev !== last_bit2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit2_expected_prev);
		$display ("     Real value = %b", bit2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_bit2_exp = bit2_expected_prev;
	end
	if (
		( bit3_expected_prev !== 1'bx ) && ( bit3_prev !== bit3_expected_prev )
		&& ((bit3_expected_prev !== last_bit3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit3_expected_prev);
		$display ("     Real value = %b", bit3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_bit3_exp = bit3_expected_prev;
	end
	if (
		( bit4_expected_prev !== 1'bx ) && ( bit4_prev !== bit4_expected_prev )
		&& ((bit4_expected_prev !== last_bit4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit4_expected_prev);
		$display ("     Real value = %b", bit4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_bit4_exp = bit4_expected_prev;
	end
	if (
		( bit5_expected_prev !== 1'bx ) && ( bit5_prev !== bit5_expected_prev )
		&& ((bit5_expected_prev !== last_bit5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit5_expected_prev);
		$display ("     Real value = %b", bit5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_bit5_exp = bit5_expected_prev;
	end
	if (
		( bit6_expected_prev !== 1'bx ) && ( bit6_prev !== bit6_expected_prev )
		&& ((bit6_expected_prev !== last_bit6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit6_expected_prev);
		$display ("     Real value = %b", bit6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_bit6_exp = bit6_expected_prev;
	end
	if (
		( bit7_expected_prev !== 1'bx ) && ( bit7_prev !== bit7_expected_prev )
		&& ((bit7_expected_prev !== last_bit7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit7_expected_prev);
		$display ("     Real value = %b", bit7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_bit7_exp = bit7_expected_prev;
	end
	if (
		( bit8_expected_prev !== 1'bx ) && ( bit8_prev !== bit8_expected_prev )
		&& ((bit8_expected_prev !== last_bit8_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit8_expected_prev);
		$display ("     Real value = %b", bit8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_bit8_exp = bit8_expected_prev;
	end
	if (
		( bit9_expected_prev !== 1'bx ) && ( bit9_prev !== bit9_expected_prev )
		&& ((bit9_expected_prev !== last_bit9_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit9_expected_prev);
		$display ("     Real value = %b", bit9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_bit9_exp = bit9_expected_prev;
	end
	if (
		( bit10_expected_prev !== 1'bx ) && ( bit10_prev !== bit10_expected_prev )
		&& ((bit10_expected_prev !== last_bit10_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit10_expected_prev);
		$display ("     Real value = %b", bit10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_bit10_exp = bit10_expected_prev;
	end
	if (
		( bit11_expected_prev !== 1'bx ) && ( bit11_prev !== bit11_expected_prev )
		&& ((bit11_expected_prev !== last_bit11_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bit11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bit11_expected_prev);
		$display ("     Real value = %b", bit11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_bit11_exp = bit11_expected_prev;
	end
	if (
		( filter_out_expected_prev !== 1'bx ) && ( filter_out_prev !== filter_out_expected_prev )
		&& ((filter_out_expected_prev !== last_filter_out_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port filter_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", filter_out_expected_prev);
		$display ("     Real value = %b", filter_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_filter_out_exp = filter_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module trivium1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clkn;
reg encip;
reg IV_1;
reg IV_2;
reg IV_3;
reg IV_4;
reg IV_5;
reg IV_6;
reg IV_7;
reg IV_8;
reg IV_9;
reg IV_10;
reg IV_11;
reg IV_12;
reg IV_13;
reg IV_14;
reg IV_15;
reg IV_16;
reg IV_17;
reg IV_18;
reg IV_19;
reg IV_20;
reg IV_21;
reg IV_22;
reg IV_23;
reg IV_24;
reg IV_25;
reg IV_26;
reg IV_27;
reg IV_28;
reg IV_29;
reg IV_30;
reg IV_31;
reg IV_32;
reg IV_33;
reg IV_34;
reg IV_35;
reg IV_36;
reg IV_37;
reg IV_38;
reg IV_39;
reg IV_40;
reg IV_41;
reg IV_42;
reg IV_43;
reg IV_44;
reg IV_45;
reg IV_46;
reg IV_47;
reg IV_48;
reg IV_49;
reg IV_50;
reg IV_51;
reg IV_52;
reg IV_53;
reg IV_54;
reg IV_55;
reg IV_56;
reg IV_57;
reg IV_58;
reg IV_59;
reg IV_60;
reg IV_61;
reg IV_62;
reg IV_63;
reg IV_64;
reg IV_65;
reg IV_66;
reg IV_67;
reg IV_68;
reg IV_69;
reg IV_70;
reg IV_71;
reg IV_72;
reg IV_73;
reg IV_74;
reg IV_75;
reg IV_76;
reg IV_77;
reg IV_78;
reg IV_79;
reg IV_80;
reg Key_1;
reg Key_2;
reg Key_3;
reg Key_4;
reg Key_5;
reg Key_6;
reg Key_7;
reg Key_8;
reg Key_9;
reg Key_10;
reg Key_11;
reg Key_12;
reg Key_13;
reg Key_14;
reg Key_15;
reg Key_16;
reg Key_17;
reg Key_18;
reg Key_19;
reg Key_20;
reg Key_21;
reg Key_22;
reg Key_23;
reg Key_24;
reg Key_25;
reg Key_26;
reg Key_27;
reg Key_28;
reg Key_29;
reg Key_30;
reg Key_31;
reg Key_32;
reg Key_33;
reg Key_34;
reg Key_35;
reg Key_36;
reg Key_37;
reg Key_38;
reg Key_39;
reg Key_40;
reg Key_41;
reg Key_42;
reg Key_43;
reg Key_44;
reg Key_45;
reg Key_46;
reg Key_47;
reg Key_48;
reg Key_49;
reg Key_50;
reg Key_51;
reg Key_52;
reg Key_53;
reg Key_54;
reg Key_55;
reg Key_56;
reg Key_57;
reg Key_58;
reg Key_59;
reg Key_60;
reg Key_61;
reg Key_62;
reg Key_63;
reg Key_64;
reg Key_65;
reg Key_66;
reg Key_67;
reg Key_68;
reg Key_69;
reg Key_70;
reg Key_71;
reg Key_72;
reg Key_73;
reg Key_74;
reg Key_75;
reg Key_76;
reg Key_77;
reg Key_78;
reg Key_79;
reg Key_80;
reg last3_ip;
reg message;
// wires                                               
wire bit1;
wire bit2;
wire bit3;
wire bit4;
wire bit5;
wire bit6;
wire bit7;
wire bit8;
wire bit9;
wire bit10;
wire bit11;
wire Cipher;
wire filter_out;
wire KEYSTREAM;
wire KEYSTREAM226;
wire Message_Decrypted;
wire pulse_1152;
wire pulse_200000;

wire sampler;                             

// assign statements (if any)                          
trivium1 i1 (
// port map - connection between master ports and signals/registers   
	.bit1(bit1),
	.bit2(bit2),
	.bit3(bit3),
	.bit4(bit4),
	.bit5(bit5),
	.bit6(bit6),
	.bit7(bit7),
	.bit8(bit8),
	.bit9(bit9),
	.bit10(bit10),
	.bit11(bit11),
	.Cipher(Cipher),
	.clkn(clkn),
	.encip(encip),
	.filter_out(filter_out),
	.IV_1(IV_1),
	.IV_2(IV_2),
	.IV_3(IV_3),
	.IV_4(IV_4),
	.IV_5(IV_5),
	.IV_6(IV_6),
	.IV_7(IV_7),
	.IV_8(IV_8),
	.IV_9(IV_9),
	.IV_10(IV_10),
	.IV_11(IV_11),
	.IV_12(IV_12),
	.IV_13(IV_13),
	.IV_14(IV_14),
	.IV_15(IV_15),
	.IV_16(IV_16),
	.IV_17(IV_17),
	.IV_18(IV_18),
	.IV_19(IV_19),
	.IV_20(IV_20),
	.IV_21(IV_21),
	.IV_22(IV_22),
	.IV_23(IV_23),
	.IV_24(IV_24),
	.IV_25(IV_25),
	.IV_26(IV_26),
	.IV_27(IV_27),
	.IV_28(IV_28),
	.IV_29(IV_29),
	.IV_30(IV_30),
	.IV_31(IV_31),
	.IV_32(IV_32),
	.IV_33(IV_33),
	.IV_34(IV_34),
	.IV_35(IV_35),
	.IV_36(IV_36),
	.IV_37(IV_37),
	.IV_38(IV_38),
	.IV_39(IV_39),
	.IV_40(IV_40),
	.IV_41(IV_41),
	.IV_42(IV_42),
	.IV_43(IV_43),
	.IV_44(IV_44),
	.IV_45(IV_45),
	.IV_46(IV_46),
	.IV_47(IV_47),
	.IV_48(IV_48),
	.IV_49(IV_49),
	.IV_50(IV_50),
	.IV_51(IV_51),
	.IV_52(IV_52),
	.IV_53(IV_53),
	.IV_54(IV_54),
	.IV_55(IV_55),
	.IV_56(IV_56),
	.IV_57(IV_57),
	.IV_58(IV_58),
	.IV_59(IV_59),
	.IV_60(IV_60),
	.IV_61(IV_61),
	.IV_62(IV_62),
	.IV_63(IV_63),
	.IV_64(IV_64),
	.IV_65(IV_65),
	.IV_66(IV_66),
	.IV_67(IV_67),
	.IV_68(IV_68),
	.IV_69(IV_69),
	.IV_70(IV_70),
	.IV_71(IV_71),
	.IV_72(IV_72),
	.IV_73(IV_73),
	.IV_74(IV_74),
	.IV_75(IV_75),
	.IV_76(IV_76),
	.IV_77(IV_77),
	.IV_78(IV_78),
	.IV_79(IV_79),
	.IV_80(IV_80),
	.Key_1(Key_1),
	.Key_2(Key_2),
	.Key_3(Key_3),
	.Key_4(Key_4),
	.Key_5(Key_5),
	.Key_6(Key_6),
	.Key_7(Key_7),
	.Key_8(Key_8),
	.Key_9(Key_9),
	.Key_10(Key_10),
	.Key_11(Key_11),
	.Key_12(Key_12),
	.Key_13(Key_13),
	.Key_14(Key_14),
	.Key_15(Key_15),
	.Key_16(Key_16),
	.Key_17(Key_17),
	.Key_18(Key_18),
	.Key_19(Key_19),
	.Key_20(Key_20),
	.Key_21(Key_21),
	.Key_22(Key_22),
	.Key_23(Key_23),
	.Key_24(Key_24),
	.Key_25(Key_25),
	.Key_26(Key_26),
	.Key_27(Key_27),
	.Key_28(Key_28),
	.Key_29(Key_29),
	.Key_30(Key_30),
	.Key_31(Key_31),
	.Key_32(Key_32),
	.Key_33(Key_33),
	.Key_34(Key_34),
	.Key_35(Key_35),
	.Key_36(Key_36),
	.Key_37(Key_37),
	.Key_38(Key_38),
	.Key_39(Key_39),
	.Key_40(Key_40),
	.Key_41(Key_41),
	.Key_42(Key_42),
	.Key_43(Key_43),
	.Key_44(Key_44),
	.Key_45(Key_45),
	.Key_46(Key_46),
	.Key_47(Key_47),
	.Key_48(Key_48),
	.Key_49(Key_49),
	.Key_50(Key_50),
	.Key_51(Key_51),
	.Key_52(Key_52),
	.Key_53(Key_53),
	.Key_54(Key_54),
	.Key_55(Key_55),
	.Key_56(Key_56),
	.Key_57(Key_57),
	.Key_58(Key_58),
	.Key_59(Key_59),
	.Key_60(Key_60),
	.Key_61(Key_61),
	.Key_62(Key_62),
	.Key_63(Key_63),
	.Key_64(Key_64),
	.Key_65(Key_65),
	.Key_66(Key_66),
	.Key_67(Key_67),
	.Key_68(Key_68),
	.Key_69(Key_69),
	.Key_70(Key_70),
	.Key_71(Key_71),
	.Key_72(Key_72),
	.Key_73(Key_73),
	.Key_74(Key_74),
	.Key_75(Key_75),
	.Key_76(Key_76),
	.Key_77(Key_77),
	.Key_78(Key_78),
	.Key_79(Key_79),
	.Key_80(Key_80),
	.KEYSTREAM(KEYSTREAM),
	.KEYSTREAM226(KEYSTREAM226),
	.last3_ip(last3_ip),
	.message(message),
	.Message_Decrypted(Message_Decrypted),
	.pulse_1152(pulse_1152),
	.pulse_200000(pulse_200000)
);

// clkn
always
begin
	clkn = 1'b0;
	clkn = #500 1'b1;
	#500;
end 

// encip
initial
begin
	encip = 1'b0;
	encip = #14000 1'b1;
end 

trivium1_vlg_sample_tst tb_sample (
	.clkn(clkn),
	.encip(encip),
	.IV_1(IV_1),
	.IV_2(IV_2),
	.IV_3(IV_3),
	.IV_4(IV_4),
	.IV_5(IV_5),
	.IV_6(IV_6),
	.IV_7(IV_7),
	.IV_8(IV_8),
	.IV_9(IV_9),
	.IV_10(IV_10),
	.IV_11(IV_11),
	.IV_12(IV_12),
	.IV_13(IV_13),
	.IV_14(IV_14),
	.IV_15(IV_15),
	.IV_16(IV_16),
	.IV_17(IV_17),
	.IV_18(IV_18),
	.IV_19(IV_19),
	.IV_20(IV_20),
	.IV_21(IV_21),
	.IV_22(IV_22),
	.IV_23(IV_23),
	.IV_24(IV_24),
	.IV_25(IV_25),
	.IV_26(IV_26),
	.IV_27(IV_27),
	.IV_28(IV_28),
	.IV_29(IV_29),
	.IV_30(IV_30),
	.IV_31(IV_31),
	.IV_32(IV_32),
	.IV_33(IV_33),
	.IV_34(IV_34),
	.IV_35(IV_35),
	.IV_36(IV_36),
	.IV_37(IV_37),
	.IV_38(IV_38),
	.IV_39(IV_39),
	.IV_40(IV_40),
	.IV_41(IV_41),
	.IV_42(IV_42),
	.IV_43(IV_43),
	.IV_44(IV_44),
	.IV_45(IV_45),
	.IV_46(IV_46),
	.IV_47(IV_47),
	.IV_48(IV_48),
	.IV_49(IV_49),
	.IV_50(IV_50),
	.IV_51(IV_51),
	.IV_52(IV_52),
	.IV_53(IV_53),
	.IV_54(IV_54),
	.IV_55(IV_55),
	.IV_56(IV_56),
	.IV_57(IV_57),
	.IV_58(IV_58),
	.IV_59(IV_59),
	.IV_60(IV_60),
	.IV_61(IV_61),
	.IV_62(IV_62),
	.IV_63(IV_63),
	.IV_64(IV_64),
	.IV_65(IV_65),
	.IV_66(IV_66),
	.IV_67(IV_67),
	.IV_68(IV_68),
	.IV_69(IV_69),
	.IV_70(IV_70),
	.IV_71(IV_71),
	.IV_72(IV_72),
	.IV_73(IV_73),
	.IV_74(IV_74),
	.IV_75(IV_75),
	.IV_76(IV_76),
	.IV_77(IV_77),
	.IV_78(IV_78),
	.IV_79(IV_79),
	.IV_80(IV_80),
	.Key_1(Key_1),
	.Key_2(Key_2),
	.Key_3(Key_3),
	.Key_4(Key_4),
	.Key_5(Key_5),
	.Key_6(Key_6),
	.Key_7(Key_7),
	.Key_8(Key_8),
	.Key_9(Key_9),
	.Key_10(Key_10),
	.Key_11(Key_11),
	.Key_12(Key_12),
	.Key_13(Key_13),
	.Key_14(Key_14),
	.Key_15(Key_15),
	.Key_16(Key_16),
	.Key_17(Key_17),
	.Key_18(Key_18),
	.Key_19(Key_19),
	.Key_20(Key_20),
	.Key_21(Key_21),
	.Key_22(Key_22),
	.Key_23(Key_23),
	.Key_24(Key_24),
	.Key_25(Key_25),
	.Key_26(Key_26),
	.Key_27(Key_27),
	.Key_28(Key_28),
	.Key_29(Key_29),
	.Key_30(Key_30),
	.Key_31(Key_31),
	.Key_32(Key_32),
	.Key_33(Key_33),
	.Key_34(Key_34),
	.Key_35(Key_35),
	.Key_36(Key_36),
	.Key_37(Key_37),
	.Key_38(Key_38),
	.Key_39(Key_39),
	.Key_40(Key_40),
	.Key_41(Key_41),
	.Key_42(Key_42),
	.Key_43(Key_43),
	.Key_44(Key_44),
	.Key_45(Key_45),
	.Key_46(Key_46),
	.Key_47(Key_47),
	.Key_48(Key_48),
	.Key_49(Key_49),
	.Key_50(Key_50),
	.Key_51(Key_51),
	.Key_52(Key_52),
	.Key_53(Key_53),
	.Key_54(Key_54),
	.Key_55(Key_55),
	.Key_56(Key_56),
	.Key_57(Key_57),
	.Key_58(Key_58),
	.Key_59(Key_59),
	.Key_60(Key_60),
	.Key_61(Key_61),
	.Key_62(Key_62),
	.Key_63(Key_63),
	.Key_64(Key_64),
	.Key_65(Key_65),
	.Key_66(Key_66),
	.Key_67(Key_67),
	.Key_68(Key_68),
	.Key_69(Key_69),
	.Key_70(Key_70),
	.Key_71(Key_71),
	.Key_72(Key_72),
	.Key_73(Key_73),
	.Key_74(Key_74),
	.Key_75(Key_75),
	.Key_76(Key_76),
	.Key_77(Key_77),
	.Key_78(Key_78),
	.Key_79(Key_79),
	.Key_80(Key_80),
	.last3_ip(last3_ip),
	.message(message),
	.sampler_tx(sampler)
);

trivium1_vlg_check_tst tb_out(
	.bit1(bit1),
	.bit2(bit2),
	.bit3(bit3),
	.bit4(bit4),
	.bit5(bit5),
	.bit6(bit6),
	.bit7(bit7),
	.bit8(bit8),
	.bit9(bit9),
	.bit10(bit10),
	.bit11(bit11),
	.Cipher(Cipher),
	.filter_out(filter_out),
	.KEYSTREAM(KEYSTREAM),
	.KEYSTREAM226(KEYSTREAM226),
	.Message_Decrypted(Message_Decrypted),
	.pulse_1152(pulse_1152),
	.pulse_200000(pulse_200000),
	.sampler_rx(sampler)
);
endmodule

